{"_id":"1d7o6ONNoiS1IYZZ","name":"狂気の発作（サマリー）表","permission":{"default":0,"d7EVptMCwEHlUFtn":3},"type":"script","flags":{},"scope":"global","command":"const tableName = \"狂気の発作（サマリー）\";\r\n\r\nconst promises = game.packs.entries\r\n  .filter((pack) => pack.entity === \"RollTable\")\r\n  .map((pack) => pack.getContent());\r\nPromise.all(promises).then((contents) => {\r\n  const tables = game.tables.entities.concat(contents.flat());\r\n  const table = tables.find((t) => t.name === tableName);\r\n  console.log(table);\r\n\r\n  const roll = table.roll();\r\n\r\n  const chatData = {\r\n    user: game.user._id,\r\n    speaker: ChatMessage.getSpeaker(),\r\n    content: `<p style=\"text-align:center;\"> ${table.name} </p><hr>` + `${roll.results[0].text}` + `<br>1D10 = [[1D10]]時間後<br>1D10 = [[ 1D10]]時間の潜在狂気`,\r\n  };\r\n  ChatMessage.create(chatData, {});\r\n});","author":"d7EVptMCwEHlUFtn","img":"modules/CoC7ja/icons/svg/other/mad-scientist-white.svg","actorIds":[]}
{"_id":"4e8QIEeWISFcbtCW","name":"マニア表","permission":{"default":0,"d7EVptMCwEHlUFtn":3},"type":"script","flags":{},"scope":"global","command":"const tableName = \"マニア表\";\r\n\r\nconst promises = game.packs.entries\r\n  .filter((pack) => pack.entity === \"RollTable\")\r\n  .map((pack) => pack.getContent());\r\nPromise.all(promises).then((contents) => {\r\n  const tables = game.tables.entities.concat(contents.flat());\r\n  const table = tables.find((t) => t.name === tableName);\r\n  console.log(table);\r\n\r\n  const roll = table.roll();\r\n  const chatData = {\r\n    user: game.user._id,\r\n    speaker: ChatMessage.getSpeaker(),\r\n    content: roll.results[0].text,\r\n  };\r\n  ChatMessage.create(chatData, {});\r\n});","author":"d7EVptMCwEHlUFtn","img":"modules/CoC7ja/icons/svg/other/smitten-white.svg","actorIds":[]}
{"_id":"9WNLRrmQuJEESJdX","name":"狂気の発作（リアルタイム）表","permission":{"default":0,"d7EVptMCwEHlUFtn":3},"type":"script","flags":{},"scope":"global","command":"const tableName = \"狂気の発作（リアルタイム）\";\r\n\r\nconst promises = game.packs.entries\r\n  .filter((pack) => pack.entity === \"RollTable\")\r\n  .map((pack) => pack.getContent());\r\nPromise.all(promises).then((contents) => {\r\n  const tables = game.tables.entities.concat(contents.flat());\r\n  const table = tables.find((t) => t.name === tableName);\r\n  console.log(table);\r\n\r\n  const roll = table.roll();\r\n\r\n  const chatData = {\r\n    user: game.user._id,\r\n    speaker: ChatMessage.getSpeaker(),\r\n    content: `<p style=\"text-align:center;\"> ${table.name} </p><hr>` + `${roll.results[0].text}` + `<br>1D10 = [[1D10]]ラウンド<br>1D10 = [[ 1D10]]時間の潜在狂気`,\r\n  };\r\n  ChatMessage.create(chatData, {});\r\n});","author":"d7EVptMCwEHlUFtn","img":"modules/CoC7ja/icons/svg/other/terror-white.svg","actorIds":[]}
{"_id":"BDRxLjJh7ACaocrz","name":"瀕死状態のOn,Off","permission":{"default":0,"d7EVptMCwEHlUFtn":3},"type":"script","flags":{},"scope":"global","command":"const target = actor || canvas.tokens.controlled[0] || game.user.character;\r\n\r\nif(target !== null){\r\nlet dying = target.data.data.status.dying.value;\r\nlet text = \"\";\r\n\r\nif (dying == false){\r\n    dying = true;\r\n    text = \"になった。\";\r\n} else {\r\n    dying = false;\r\n    text = \"から回復した。\";\r\n}\r\n\r\nlet obj = {};\r\nobj[`data.status.dying.value`] = dying;\r\ntarget.update(obj);\r\n\r\nconst content = `<p>${target.name}は瀕死状態${text}</p>`;\r\n\r\nlet chatData ={\r\n    user: game.user._id,\r\n    speaker: ChatMessage.getSpeaker(),\r\n    content: content\r\n};\r\n\r\nChatMessage.create(chatData, {});\r\n} else {  \r\n   ui.notifications.warn(\"トークンを選択してください\"); \r\n}","author":"d7EVptMCwEHlUFtn","img":"modules/CoC7ja/icons/svg/other/ambulance-white.svg","actorIds":[]}
{"_id":"E2BHuFUajFxiA0lZ","name":"正気度の増減","permission":{"default":0,"d7EVptMCwEHlUFtn":3},"type":"script","flags":{},"scope":"global","command":"let target = actor || canvas.tokens.controlled[0] || game.user.character;\r\nlet LorC = true;\r\n\r\nif(target == null){\r\n  ui.notifications.warn(\r\n    \"対象を選択してください\"\r\n  );\r\n}else{\r\n\r\n  function henkan(str){\r\n      return str.replace(/[Ａ-Ｚａ-ｚ０-９＋－]/g, function(s) {\r\n        return String.fromCharCode(s.charCodeAt(0) - 0xFEE0);\r\n    });\r\n  }\r\n\r\n  function SanTarget(SAN_die, DorA){\r\n    let read = SAN_die;\r\n    const ready = henkan(read);\r\n    if(ready.match(/(?:(?:[\\+\\-]+)?\\d+){0,}(?:(?:\\d+)?d?\\d+){0,}(?:(?:[\\+\\-]+)?\\d+){0,}(?:(?:\\d+)?d?\\d+){0,}/i)){\r\n\r\n      if(ready == \"0\"){\r\n        ui.notifications.warn(\r\n          \"入力値が0のため実行されませんでした\"\r\n        );\r\n        return;\r\n      }\r\n      let roll = new Roll(ready);\r\n      roll.roll();\r\n      let SanityP = target.data.data.attribs.san.value;\r\n      let SANmax = target.data.data.attribs.san.max;\r\n      let DAYSAN = target.data.data.attribs.san.dailyLoss;\r\n      let indef = target.data.data.status.indefInsane.value;\r\n      let tempo = target.data.data.status.tempoInsane.value;\r\n      let Indef_count = 0;\r\n      if((DAYSAN + SanityP) > 0){\r\n        Indef_count = ((SanityP - DAYSAN)*4)/5\r\n      }\r\n      let value = 0;\r\n      if(roll.total<0){\r\n        value = 0;\r\n      }else{\r\n        value = roll.total;\r\n      }\r\n      let Afterpoint = 0;\r\n      let max = false;\r\n      let differ = 0;\r\n      if(LorC){\r\n        Afterpoint = SanityP - value;\r\n        if(Afterpoint<0){\r\n          Afterpoint = 0;\r\n        }\r\n      }else{\r\n        Afterpoint = SanityP + value;\r\n        if(Afterpoint>SANmax){\r\n          differ = (value - Afterpoint) + SANmax;\r\n          Afterpoint = SANmax;\r\n          max = true;\r\n        }\r\n      }\r\n      let obj = {};\r\n      obj[`data.attribs.san.value`] = Afterpoint;\r\n      let text = \"\";\r\n      let Indef_text = \"\";\r\n      let Insane_text = \"\";\r\n      if(LorC){\r\n        text = `<ul>${target.name}の正気度ポイントが${value}ポイント減少して、${Afterpoint}ポイントとなりました</ul>`;\r\n        DAYSAN -= value;\r\n        obj[`data.attribs.san.dailyLoss`] = DAYSAN;\r\n        if(value>=5){\r\n          Insane_text += `<ul>5ポイント以上の正気度ポイントを失ったので、<span style=\"color: black; font-weight: 900; font-size: 120%;\">INTロール</span>をする必要があります</ul>`;\r\n        }\r\n        if(tempo || indef){\r\n          Insane_text += `<ul>潜在狂気の期間中に正気度ポイントを失ったので、現在の状況での<span style=\"color: red; font-weight: 900; font-size: 120%;\">狂気の発作表をロール</span>してください</ul>`;\r\n        }\r\n        if(Afterpoint <= Indef_count){\r\n          Insane_text += `<ul><span style=\"color: red; font-weight: 900; font-size: 120%;\">不定の狂気となりました</span><br>現在の状況での<span style=\"color: red; font-weight: 900; font-size: 120%;\">狂気の発作表をロール</span>してください（正気度の1日のカウントはリセットされていません）<ul>`;\r\n          obj[`data.status.indefInsane.value`] = true;\r\n        }\r\n      }else{\r\n        if(max){\r\n          text = `<ul>${target.name}は正気度ポイントが${differ}ポイント回復して、${Afterpoint}ポイントとなりました（<span style=\"color: blue; font-weight: 900; font-size: 120%;\">最大値まで回復しました）</span></ul>`;\r\n        }else{\r\n          text = `<ul>${target.name}の正気度ポイントが${value}ポイント回復して、${Afterpoint}ポイントとなりました</ul>`;\r\n        }\r\n      }\r\n      target.update(obj);\r\n      let chatData = {\r\n        speaker: ChatMessage.getSpeaker(target),\r\n        flavor: text+Insane_text,\r\n      };\r\n      roll.toMessage(chatData);\r\n    }else{\r\n      ui.notifications.warn(\r\n        \"正しい形式で入力してください\"\r\n      );\r\n      return;\r\n    }\r\n  }\r\n\r\n  new Dialog({\r\n    title: \"正気度の増減\",\r\n    content:\r\n      \"<p>（±数値）と（±数値d数値）の組み合わせで入力できます<br>例：1+1D6-1d3<br>※式の終わりが±記号の場合、動作しません<br>※正気度の最大値と最小値の範囲は守られます<br>※喪失の場合、1日に失った正気度に値を自動反映します<br>※数値入力後Enterキーを押せばクリックせずに喪失となります</p><center><input type='text' name='amountInput'></center><br>\",\r\n    buttons:{\r\n      min:{\r\n        label: \"喪失\",\r\n        icon: '<i class=\"fas fa-brain\"></i>',\r\n        callback: (html) => { LorC = true\r\n        },\r\n      },\r\n      add:{\r\n        label: \"回復\",\r\n        icon: '<i class=\"fas fa-grin-squint\"></i>',\r\n        callback: (html) => { LorC = false\r\n        },\r\n      },\r\n    },\r\n    default: \"min\",\r\n    close: html =>{\r\n      const SAN_die = html.find('[name=amountInput]')[0].value || \"0\";\r\n      SanTarget(SAN_die, LorC);\r\n    }\r\n  }).render(true);\r\n}\r\n","author":"d7EVptMCwEHlUFtn","img":"modules/CoC7ja/icons/svg/other/half-dead-white.svg","actorIds":[]}
{"_id":"G2VUohXI2yYugfjZ","name":"不定の狂気のOn,Off","permission":{"default":0,"d7EVptMCwEHlUFtn":3},"type":"script","flags":{},"scope":"global","command":"const target = actor || canvas.tokens.controlled[0] || game.user.character;\r\n\r\nif(target !== null){\r\nlet indef = target.data.data.status.indefInsane.value;\r\nlet text = \"\";\r\n\r\nif (indef == false){\r\n    indef = true;\r\n    text = \"になった。\";\r\n} else {\r\n    indef = false;\r\n    text = \"が治った。\";\r\n}\r\n\r\nlet obj = {};\r\nobj[`data.status.indefInsane.value`] = indef;\r\ntarget.update(obj);\r\n\r\nconst content = `<p>${target.name}は不定の狂気${text}</p>`;\r\n\r\nlet chatData ={\r\n    user: game.user._id,\r\n    speaker: ChatMessage.getSpeaker(),\r\n    content: content\r\n};\r\n\r\nChatMessage.create(chatData, {});\r\n} else {  \r\n   ui.notifications.warn(\"トークンを選択してください\"); \r\n}\r\n","author":"d7EVptMCwEHlUFtn","img":"modules/CoC7ja/icons/svg/other/brain-tentacle-white.svg","actorIds":[]}
{"_id":"G9UwbgRtBdNd4RYx","name":"重傷状態のOn,Off","permission":{"default":0,"d7EVptMCwEHlUFtn":3},"type":"script","flags":{},"scope":"global","command":"const target = actor || canvas.tokens.controlled[0] || game.user.character;\r\n\r\nif(target !== null){\r\nlet cw = target.data.data.status.criticalWounds.value;\r\nlet text = \"\";\r\n\r\nif (cw == false){\r\n    cw = true;\r\n    text = \"になった。\";\r\n} else {\r\n    cw = false;\r\n    text = \"から回復した。\";\r\n}\r\n\r\nlet obj = {};\r\nobj[`data.status.criticalWounds.value`] = cw;\r\ntarget.update(obj);\r\n\r\nconst content = `<p>${target.name}は重症状態${text}</p>`;\r\n\r\nlet chatData ={\r\n    user: game.user._id,\r\n    speaker: ChatMessage.getSpeaker(),\r\n    content: content\r\n};\r\n\r\nChatMessage.create(chatData, {});\r\n} else {  \r\n   ui.notifications.warn(\"トークンを選択してください\"); \r\n}","author":"d7EVptMCwEHlUFtn","img":"modules/CoC7ja/icons/svg/other/arm-sling-white.svg","actorIds":[]}
{"_id":"LgV1tOJId6MlPsIu","name":"キャスティング・ロールのプッシュ失敗表（強力）","permission":{"default":0,"d7EVptMCwEHlUFtn":3},"type":"script","flags":{},"scope":"global","command":"const tableName = \"キャスティング・ロールのプッシュ失敗表（強力）\";\r\n\r\nconst promises = game.packs.entries\r\n  .filter((pack) => pack.entity === \"RollTable\")\r\n  .map((pack) => pack.getContent());\r\nPromise.all(promises).then((contents) => {\r\n  const tables = game.tables.entities.concat(contents.flat());\r\n  const table = tables.find((t) => t.name === tableName);\r\n  console.log(table);\r\n\r\n  const roll = table.roll();\r\n\r\n  const chatData = {\r\n    user: game.user._id,\r\n    speaker: ChatMessage.getSpeaker(),\r\n    content: `<p style=\"text-align:center;\"> ${table.name} </p><hr>` + `${roll.results[0].text}`,\r\n  };\r\n  ChatMessage.create(chatData, {});\r\n});","author":"d7EVptMCwEHlUFtn","img":"modules/CoC7ja/icons/svg/other/evil-book-white.svg","actorIds":[]}
{"_id":"MwHEBDWuBbGoWjEX","name":"一時の狂気のOn,Off","permission":{"default":0,"d7EVptMCwEHlUFtn":3},"type":"script","flags":{},"scope":"global","command":"const target = actor || canvas.tokens.controlled[0] || game.user.character;\r\n\r\nif(target !== null){\r\n  let tempo = target.data.data.status.tempoInsane.value;\r\n  let text = \"\";\r\n\r\n  if (tempo == false){\r\n      tempo = true;\r\n      text = \"になった。\";\r\n  } else {\r\n      tempo = false;\r\n      text = \"が治った。\";\r\n  }\r\n\r\n  let obj = {};\r\n  obj[`data.status.tempoInsane.value`] = tempo;\r\n  target.update(obj);\r\n\r\n  const content = `<p>${target.name}は一時的狂気${text}</p>`;\r\n\r\n  let chatData ={\r\n      user: game.user._id,\r\n      speaker: ChatMessage.getSpeaker(),\r\n      content: content\r\n  };\r\n\r\n  ChatMessage.create(chatData, {});\r\n} else {  \r\n   ui.notifications.warn(\"トークンを選択してください\"); \r\n}","author":"d7EVptMCwEHlUFtn","img":"modules/CoC7ja/icons/svg/other/duality-mask-white.svg","actorIds":[]}
{"_id":"OzJh3r8G4vYHVmIM","name":"Charaenoからインポート","permission":{"default":0,"rDV0PXZXAfsEunZy":3},"type":"script","flags":{"core":{"sourceId":"Macro.W5oYyeE1Hh5bs2Ko"}},"scope":"global","command":"/**\n * 実装した際のバージョン\n * - Foundry VTT 0.8.9\n * - Call of Cthulhu 7th edition (Unofficial) 0.6.7 https://github.com/HavlockV/CoC7-FoundryVTT/\n */\nDialog.prompt({\n  title: \"Charaeno からインポート\",\n  content: `\n    キャラクターシートのURL:<br/>\n    <input\n        id='charaeno-url'\n        placeholder='https://charaeno.sakasin.net/7th/id'\n        style='width: 100%'\n    />\n`,\n  label: \"インポートする\",\n  render: () => $(\"#charaeno-url\").focus(),\n  callback: async () => {\n    const input = $(\"#charaeno-url\").val().trim();\n    const { api, url, error } = parseInput(input);\n    if (error) {\n      ui.notifications.warn(\"入力されたURLが正しくありません。\");\n      return;\n    }\n    try {\n      const response = await fetch(api);\n      const data = await response.json();\n      await createCharacter(data, url);\n      ui.notifications.info(\n        \"インポートに成功しました。アクター一覧を確認してください。\"\n      );\n    } catch (error) {\n      ui.notifications.warn(\"シートの読み込みに失敗しました。\");\n      console.error(error);\n    }\n  },\n});\n\nconst parseInput = (input) => {\n  if (!input) {\n    return { error: \"インポートするURLを入力してください。\" };\n  }\n  let url = null;\n  try {\n    url = new URL(input);\n  } catch (err) {\n    console.error(err);\n    return { error: \"入力されたURLが正しくありません。\" };\n  }\n  if (\n    url.host !== \"charaeno.sakasin.net\" ||\n    url.pathname.substring(1, url.pathname.lastIndexOf(\"/\")) !== \"7th\"\n  ) {\n    return { error: \"入力されたURLが正しくありません。\" };\n  }\n  const api = `https://charaeno.sakasin.net/api/v1${url.pathname}/summary`;\n  const sheetUrl = `https://charaeno.sakasin.net${url.pathname}`;\n  return { api, url: sheetUrl };\n};\n\nconst createImportCharactersFolderIfNotExists = async () => {\n  let importedCharactersFolder = game.folders.find(\n    entry =>\n      entry.data.name === \"Imported characters\" && entry.data.type === \"Actor\"\n  );\n  if (importedCharactersFolder === null || importedCharactersFolder === undefined) {\n    // Create the folder\n    importedCharactersFolder = await Folder.create({\n      name: \"Imported characters\",\n      type: \"Actor\",\n      parent: null,\n    });\n    ui.notifications.info(\"Created Imported Characters folder\");\n  }\n  return importedCharactersFolder;\n};\n\nconst createCharacter = async (data, url) => {\n  let importedCharactersFolder =\n    await createImportCharactersFolderIfNotExists();\n\n  const promises = game.packs.contents\n    .filter((pack) => pack.entity === \"Item\")\n    .map((pack) => pack.getContent());\n  const contents = await Promise.all(promises);\n  const items = game.tables.entities.concat(contents.flat());\n  const LIST = {\n    skills: items.filter((i) => i.data.type === \"skill\"),\n    // weapons: items.filter((i) => i.data.type === \"weapon\"),\n  };\n\n  const actor = await Actor.create({\n    name: data.name,\n    type: \"character\",\n    folder: importedCharactersFolder.id,\n    data: {},\n  });\n  await updateActorData(actor, data, url);\n  await addSkills(actor, data, LIST);\n  // await addWeapons(actor, data, LIST); // TODO: やる気が無くなった\n  await addItems(actor, data);\n\n  // actor.sheet.render(true);\n};\n\nconst updateActorData = (actor, data, url) => {\n  const updateData = {};\n  [\"occupation\", \"age\", \"sex\", \"residence\", \"birthplace\"].forEach((key) => {\n    updateData[`data.infos.${key}`] = data[key];\n  });\n  updateData[\"data.infos.age\"] = data.age;\n  [\"str\", \"con\", \"siz\", \"dex\", \"app\", \"int\", \"pow\", \"edu\"].forEach((key) => {\n    updateData[`data.characteristics.${key}.value`] = data.characteristics[key];\n  });\n  [\"hp\", \"mp\", \"mov\", \"db\", \"build\"].forEach((key) => {\n    updateData[`data.attribs.${key}.value`] = data.attribute[key];\n  });\n  updateData[\"data.attribs.san.value\"] = data.attribute.san.value;\n  updateData[\"data.attribs.lck.value\"] = data.attribute.luck;\n\n  if (\n    [\"cash\", \"spendingLevel\", \"assetsDetails\"]\n      .map((key) => data.credit[key])\n      .some(Boolean)\n  ) {\n    updateData[\"data.flags.manualCredit\"] = true;\n    updateData[`data.credit.cash`] = data.credit.cash;\n    updateData[`data.credit.spendingLevel`] = data.credit.spendingLevel;\n    updateData[`data.credit.assets`] = data.credit.assetsDetails;\n  }\n\n  const backstories = data.backstory.map((story) => {\n    return {\n      title: story.name,\n      value: story.entries.map((entry) => entry.text.trim()).join(\"\\n\"),\n    };\n  });\n  backstories.push({\n    title: \"メモ\",\n    value: data.note.trim(),\n  });\n  updateData[\"data.biography\"] = backstories;\n\n  updateData[\"data.backstory\"] =\n    `<p>Auto import from ${url}</p>` +\n    backstories\n      .map((story) => {\n        return `<h2>${story.title}</h2><p>${story.value.replace(\n          /\\n/g,\n          \"<br/>\"\n        )}</p>`;\n      })\n      .join(\"\");\n\n  return actor.update(updateData);\n};\n\nconst addSkills = async (actor, data, list) => {\n  const newSkills = data.skills\n    .filter((skill) => skill.value > 0)\n    .map((skill) => {\n      let specialization = \"\";\n      let name = skill.name;\n      const m = skill.name.match(/^(.+)（(.*)）$/);\n      if (m) {\n        specialization = m[1];\n        name = m[2] === \"\" ? `${m[1]}（専門分野を選ぶ）` : m[2];\n        if (m[1] === \"運転\" && m[2] === \"自動車\") {\n          specialization = \"\";\n          name = skill.name;\n        } else if (m[1] === \"母国語\") {\n          specialization = \"言語\";\n          name = \"母国語\";\n        } else if (m[1] === \"ほかの言語\") {\n          specialization = \"言語\";\n          name = m[2] === \"\" ? \"ほかの言語（専門分野を選ぶ）\" : skill.name;\n        }\n      }\n      const existingSkill = list.skills.find(\n        (i) =>\n          i.data.data.specialization === specialization && i.data.name === name\n      );\n\n      const newSkill = {\n        type: \"skill\",\n        img: null,\n      };\n\n      if (existingSkill) {\n        newSkill.name = existingSkill.data.name;\n        newSkill.img = existingSkill.data.img;\n        newSkill.data = existingSkill.data.data;\n        const experience = skill.value - Number(existingSkill.data.data.base);\n        if (experience !== 0) {\n          newSkill.data.adjustments = { experience };\n        }\n        // newSkill.data.base = skill.value; // TODO: find a way to keep the base\n        newSkill.data.value = skill.value;\n      } else {\n        newSkill.name = name;\n        newSkill.data = {\n          value: skill.value,\n          base: skill.value,\n          specialization,\n          properties: {\n            ...DEFAULT_PROPERTIES,\n            special: specialization !== \"\",\n            combat: [\"近接戦闘\", \"射撃\"].includes(specialization),\n            fighting: specialization === \"近接戦闘\",\n            firearm: specialization === \"射撃\",\n          },\n        };\n      }\n\n      return newSkill;\n    });\n\n  return actor.createOwnedItem(newSkills);\n};\n\nconst DEFAULT_PROPERTIES = {\n  // special: false,\n  rarity: false,\n  push: true,\n  // combat: false,\n};\n\n// // TODO: やる気が無くなった\n// const addWeapons = async (actor, data, list) => {\n//   const weapons = data.weapons.map((weapon) => {\n//     let name = weapon.name;\n//     if (name === \"素手\") {\n//       name = \"こぶし\";\n//     }\n//     const existingWeapon = list.weapons.find((i) => i.data.name === name);\n//     const newWeapon = {\n//       name: name,\n//       type: \"weapon\",\n//       data: {\n//         properties: {\n//           rngd: !Boolean(weapon.range),\n//           melee: weapon.damage.includes(\"DB\"), // if a weapon doesDamageBonus usually means it's a melee weapon\n//           addb: weapon.damage.includes(\"DB\"),\n//         },\n//         range: {\n//           // TODO\n//         },\n//       },\n//     };\n//     let newSkill = null;\n//     if (existingWeapon) {\n//       const skill = actor.getOwnedItem(existingWeapon.data.data.skill.main.id);\n//       if (!skill) {\n//         const foundSkill = list.skills.find(\n//           (i) => i.data.name === existingWeapon.data.data.skill.main.name\n//         );\n//         newSkill = duplicate(foundSkill);\n//         newSkill.data.value = weapon.value;\n//         const experience = weapon.value - Number(foundSkill.data.data.base);\n//         if (experience !== 0) {\n//           newSkill.data.adjustments = { experience };\n//         }\n//       }\n//     }\n//   });\n// };\n\nconst addItems = (actor, data) => {\n  const items = data.possessions.map((item) => {\n    return {\n      name: item.name,\n      type: \"item\",\n      quantity: item.count,\n      data: {\n        description: item.detail ? `<p>${item.detail}</p>` : \"\",\n      },\n    };\n  });\n  return actor.addItems(items);\n};","author":"rDV0PXZXAfsEunZy","img":"modules/CoC7ja/icons/svg/other/teleport.svg","actorIds":[]}
{"_id":"YbGWhhU1j1PuNlXO","name":"気絶状態のOn,Off","permission":{"default":0,"d7EVptMCwEHlUFtn":3},"type":"script","flags":{},"scope":"global","command":"const target = actor || canvas.tokens.controlled[0] || game.user.character;\r\n\r\nif(target !== null){\r\nlet unco = target.data.data.status.unconscious.value;\r\nlet text = \"\";\r\n\r\nif (unco == false){\r\n    unco = true;\r\n    text = \"気絶した。\";\r\n} else {\r\n    unco = false;\r\n    text = \"目を覚ました。\";\r\n}\r\n\r\nlet obj = {};\r\nobj[`data.status.unconscious.value`] = unco;\r\ntarget.update(obj);\r\n\r\nconst content = `<p>${target.name}は${text}</p>`;\r\n\r\nlet chatData ={\r\n    user: game.user._id,\r\n    speaker: ChatMessage.getSpeaker(),\r\n    content: content\r\n};\r\n\r\nChatMessage.create(chatData, {});\r\n} else {  \r\n   ui.notifications.warn(\"トークンを選択してください\"); \r\n}","author":"d7EVptMCwEHlUFtn","img":"modules/CoC7ja/icons/svg/other/knockout-white.svg","actorIds":[]}
{"_id":"ZEWbrqoMHJcZJZbe","name":"ダメージと回復","permission":{"default":0,"d7EVptMCwEHlUFtn":3},"type":"script","flags":{},"scope":"global","command":"let target = actor || canvas.tokens.controlled[0] || game.user.character;\r\nlet DorA = true;\r\n\r\nif(target == null){\r\n  ui.notifications.warn(\r\n    \"対象を選択してください\"\r\n  );\r\n}else{\r\n\r\n  function henkan(str){\r\n      return str.replace(/[Ａ-Ｚａ-ｚ０-９＋－]/g, function(s) {\r\n        return String.fromCharCode(s.charCodeAt(0) - 0xFEE0);\r\n    });\r\n  }\r\n\r\n  function HpTarget(HP_die, DorA){\r\n    let read = HP_die;\r\n    const ready = henkan(read);\r\n    if(ready.match(/(?:(?:[\\+\\-]+)?\\d+){0,}(?:(?:\\d+)?d?\\d+){0,}(?:(?:[\\+\\-]+)?\\d+){0,}(?:(?:\\d+)?d?\\d+){0,}/i)){\r\n\r\n      if(ready == \"0\"){\r\n        ui.notifications.warn(\r\n          \"入力値が0のため実行されませんでした\"\r\n        );\r\n        return;\r\n      }\r\n      let roll = new Roll(ready);\r\n      roll.roll();\r\n      let HPP = target.data.data.attribs.hp.value;\r\n      let HPmax = target.data.data.attribs.hp.max;\r\n      const HalfHPmax = HPmax/2;\r\n      let unco = target.data.data.status.unconscious.value;\r\n      let cw = target.data.data.status.criticalWounds.value;\r\n      let cw_tempo = false;\r\n      let unco_tempo = false;\r\n      let dying = target.data.data.status.dying.value;\r\n      if(dying && !cw){\r\n        ui.notifications.warn(\r\n          \"現在の状態が、瀕死であり重症でないということはありえません。手動で確認・修正をしてください。\"\r\n        );\r\n        return;\r\n      }\r\n      if(cw && (HPP > HalfHPmax)){\r\n        ui.notifications.warn(\r\n          \"現在の状態が、重症で耐久力が最大値の1/2以上ということはありえません。手動で確認・修正をしてください。\"\r\n        );\r\n        return;\r\n      }\r\n      let value = 0;\r\n      if(roll.total<0){\r\n        value = 0;\r\n      }else{\r\n        value = roll.total;\r\n      }\r\n      let Afterpoint = 0;\r\n      let max = false;\r\n      let differ = 0;\r\n      let dead = false;\r\n      if(DorA){\r\n        Afterpoint = HPP - value;\r\n        if(value > HPmax){\r\n          dead = true;\r\n          Afterpoint = 0;\r\n        }else if(value >= HalfHPmax){\r\n          if(!cw){\r\n            cw_tempo = true;\r\n          }\r\n        }\r\n        if(Afterpoint<=0){\r\n          Afterpoint = 0;\r\n          if(!dead){\r\n          unco_tempo = true;\r\n            if(cw || cw_tempo){\r\n              dying = true;\r\n            }\r\n          }\r\n        }\r\n      }else{\r\n        Afterpoint = HPP + value;\r\n        if(Afterpoint>HPmax){\r\n          differ = (value - Afterpoint) + HPmax;\r\n          Afterpoint = HPmax;\r\n          max = true;\r\n        }\r\n      }\r\n      let obj = {};\r\n      if(cw_tempo){\r\n        obj[`data.status.criticalWounds.value`] = cw_tempo;\r\n      }\r\n      if(dying){\r\n        obj[`data.status.dying.value`] = dying;\r\n      }\r\n      if(unco_tempo){\r\n        obj[`data.status.unconscious.value`] = unco_tempo;\r\n      }\r\n      obj[`data.attribs.hp.value`] = Afterpoint;\r\n      let text = \"\";\r\n      if(max){\r\n        text = `<ul>${target.name}は耐久力が${differ}ポイント回復して、${Afterpoint}ポイントとなった（<span style=\"color: blue; font-weight: 900; font-size: 120%;\">全快した</span>）</ul>`;\r\n        obj[`data.status.criticalWounds.value`] = false;\r\n        obj[`data.status.dying.value`] = false;\r\n        obj[`data.status.unconscious.value`] = false;\r\n      }else if(dead && DorA){\r\n        text = `<ul>${target.name}は一撃で最大耐久力以上の${value}ダメージを受けて、<span style=\"color: red; font-weight: 900; font-size: 120%;\">死亡した</span></ul>`;\r\n      }else if((unco_tempo && DorA) && cw_tempo){\r\n   　　     text = `<ul>${target.name}は最大耐久力の1/2以上の${value}ポイントのダメージを受けて<span style=\"color: red; font-weight: 900; font-size: 120%;\">重症</span>および<span style=\"color: blue; font-weight: 900; font-size: 120%;\">伏せ状態</span>となり、さらに耐久力が${Afterpoint}ポイントとなったことから、<span style=\"color: red; font-weight: 900; font-size: 120%;\">瀕死状態</span>および<span style=\"color: red; font-weight: 900; font-size: 120%;\">意識不明</span>となった</ul>`;\r\n      }else if((cw && unco_tempo) && DorA){\r\n      　　  text = `<ul>元から重症であった${target.name}は${value}ポイントのダメージを受けて、耐久力が${Afterpoint}ポイントとなったことから、<span style=\"color: red; font-weight: 900; font-size: 120%;\">瀕死</span>および<span style=\"color: red; font-weight: 900; font-size: 120%;\">意識不明</span>となった</ul>`;\r\n      }else if(cw_tempo && DorA){\r\n        text = `<ul>${target.name}は最大耐久力の1/2以上の${value}ポイントのダメージを受けて、<span style=\"color: red; font-weight: 900; font-size: 120%;\">重傷</span>および<span style=\"color: blue; font-weight: 900; font-size: 120%;\">伏せ状態</span>となり、耐久力が${Afterpoint}ポイントとなった<br>意識があった場合には、そのまま意識不明となるかを判断するため<span style=\"color: black; font-weight: 900; font-size: 120%;\">CONロール</span>をただちに行うこと</ul>`;\r\n      }else if(unco_tempo && DorA){\r\n        text = `<ul>${target.name}は${value}ポイントのダメージを受けて、耐久力が${Afterpoint}ポイントとなり、<span style=\"color: red; font-weight: 900; font-size: 120%;\">意識不明</span>となった</ul>`;\r\n      }else{\r\n        if(DorA){\r\n          text = `<ul>${target.name}は${value}ポイントのダメージを受けて、耐久力が${Afterpoint}ポイントとなった</ul>`;\r\n        }else{\r\n          if((dying && cw) && (Afterpoint > HalfHPmax)){\r\n            text = `<ul>重症で瀕死の${target.name}は耐久力を${value}ポイント回復して、<span style=\"color: blue; font-weight: 900; font-size: 120%;\">重傷と瀕死から回復し</span>、耐久力が${Afterpoint}ポイントとなった</ul>`;\r\n            obj[`data.status.criticalWounds.value`] = false;\r\n            obj[`data.status.dying.value`] = false;\r\n            obj[`data.status.unconscious.value`] = false;\r\n          }else if(dying && (Afterpoint>0)){\r\n            text = `<ul>瀕死であった${target.name}は耐久力を${value}ポイント回復して、<span style=\"color: blue; font-weight: 900; font-size: 120%;\">一時的に容態が安定</span>し、耐久力が${Afterpoint}ポイントとなった<br>1時間以内に医学ロールに成功していなければ、瀕死からは回復しない（<span style=\"color: blue; font-weight: 900; font-size: 120%;\">意識も一時的に回復した</span>）</ul>`;\r\n            obj[`data.status.unconscious.value`] = false;\r\n          }else if(cw && unco && (Afterpoint>0)){\r\n            text = `<ul>重症で気絶していた${target.name}は耐久力を${value}ポイント回復して、<span style=\"color: blue; font-weight: 900; font-size: 120%;\">意識を回復し</span>、耐久力が${Afterpoint}ポイントとなった</ul>`;\r\n            obj[`data.status.unconscious.value`] = false;\r\n          }else if(unco && (Afterpoint>0)){\r\n            text = `<ul>気絶していた${target.name}は耐久力を${value}ポイント回復して、<span style=\"color: blue; font-weight: 900; font-size: 120%;\">意識を回復し</span>、耐久力が${Afterpoint}ポイントとなった</ul>`;\r\n            obj[`data.status.unconscious.value`] = false;\r\n          }else if(cw && Afterpoint > HalfHPmax){\r\n            text = `<ul>重症であった${target.name}は耐久力を${value}ポイント回復して、<span style=\"color: blue; font-weight: 900; font-size: 120%;\">重傷から回復し</span>、耐久力が${Afterpoint}ポイントとなった</ul>`;\r\n            obj[`data.status.criticalWounds.value`] = false;\r\n          }else{\r\n            text = `<ul>${target.name}は耐久力を${value}ポイント回復して、耐久力が${Afterpoint}ポイントとなった</ul>`;\r\n          }\r\n        }\r\n      }\r\n      target.update(obj);\r\n      let chatData = {\r\n        speaker: ChatMessage.getSpeaker(target),\r\n        flavor: text,\r\n      };\r\n      roll.toMessage(chatData);\r\n    }else{\r\n      ui.notifications.warn(\r\n        \"正しい形式で入力してください\"\r\n      );\r\n      return;\r\n    }\r\n  }\r\n\r\n  new Dialog({\r\n    title: \"ダメージと回復\",\r\n    content:\r\n      \"<p>（±数値）と（±数値d数値）の組み合わせで入力できます<br>例：1+1D6-1d3<br>※式の終わりが±記号の場合、動作しません<br>※耐久力の最大値と最小値の範囲は守られます<br>※数値入力後Enterキーを押せばクリックせずにダメージとなります</p><center><input type='text' name='amountInput'></center><br>\",\r\n    buttons:{\r\n      min:{\r\n        label: \"ダメージ\",\r\n        icon: '<i class=\"fas fa-skull-crossbones\"></i>',\r\n        callback: () => { DorA = true\r\n        },\r\n      },\r\n      add:{\r\n        label: \"回復\",\r\n        icon: '<i class=\"fas fa-hand-holding-medical\"></i>',\r\n        callback: () => { DorA = false\r\n        },\r\n      },\r\n    },\r\n    default: \"min\",\r\n    close: html =>{\r\n      const HP_die = html.find('[name=amountInput]')[0].value || \"0\";\r\n      HpTarget(HP_die, DorA);\r\n    }\r\n  }).render(true);\r\n}","author":"d7EVptMCwEHlUFtn","img":"modules/CoC7ja/icons/svg/other/life-bar-white.svg","actorIds":[]}
{"_id":"ay2pdDgLKq6zgmBL","name":"キャスティング・ロールのプッシュ失敗表（弱い）","permission":{"default":0,"d7EVptMCwEHlUFtn":3},"type":"script","flags":{},"scope":"global","command":"const tableName = \"キャスティング・ロールのプッシュ失敗表（弱い）\";\r\n\r\nconst promises = game.packs.entries\r\n  .filter((pack) => pack.entity === \"RollTable\")\r\n  .map((pack) => pack.getContent());\r\nPromise.all(promises).then((contents) => {\r\n  const tables = game.tables.entities.concat(contents.flat());\r\n  const table = tables.find((t) => t.name === tableName);\r\n  console.log(table);\r\n\r\n  const roll = table.roll();\r\n\r\n  const chatData = {\r\n    user: game.user._id,\r\n    speaker: ChatMessage.getSpeaker(),\r\n    content: `<p style=\"text-align:center;\"> ${table.name} </p><hr>` + `${roll.results[0].text}`,\r\n  };\r\n  ChatMessage.create(chatData, {});\r\n});","author":"d7EVptMCwEHlUFtn","img":"modules/CoC7ja/icons/svg/other/book-storm-white.svg","actorIds":[]}
{"_id":"hg09qZYiF1wmtbWU","name":"恐怖症表","permission":{"default":0,"d7EVptMCwEHlUFtn":3},"type":"script","flags":{},"scope":"global","command":"const tableName = \"恐怖症表\";\r\n\r\nconst promises = game.packs.entries\r\n  .filter((pack) => pack.entity === \"RollTable\")\r\n  .map((pack) => pack.getContent());\r\nPromise.all(promises).then((contents) => {\r\n  const tables = game.tables.entities.concat(contents.flat());\r\n  const table = tables.find((t) => t.name === tableName);\r\n  console.log(table);\r\n\r\n  const roll = table.roll();\r\n  const chatData = {\r\n    user: game.user._id,\r\n    speaker: ChatMessage.getSpeaker(),\r\n    content: roll.results[0].text,\r\n  };\r\n  ChatMessage.create(chatData, {});\r\n});","author":"d7EVptMCwEHlUFtn","img":"modules/CoC7ja/icons/svg/other/paranoia-white.svg","actorIds":[]}
